import { useEffect, useState } from "react";
import { db } from "./firebase";
import { ref, onValue, set, runTransaction } from "firebase/database";
import toast from 'react-hot-toast';

const MAX_PEOPLE = 3;

// H√†m t·∫°o danh s√°ch tu·∫ßn
const generateWeeks = () => {
  const weeks = [];
  const today = new Date();
  
  // T·∫°o 8 tu·∫ßn: 2 tu·∫ßn tr∆∞·ªõc, tu·∫ßn hi·ªán t·∫°i, v√† 5 tu·∫ßn sau
  for (let i = -2; i <= 5; i++) {
    const startDate = new Date(today);
    const dayOfWeek = today.getDay();
    const mondayOffset = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // Ch·ªß nh·∫≠t = 0, Th·ª© 2 = 1
    startDate.setDate(today.getDate() + mondayOffset + (i * 7));
    
    const endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6);
    
    const weekId = `week-${startDate.getFullYear()}-${String(startDate.getMonth() + 1).padStart(2, '0')}-${String(startDate.getDate()).padStart(2, '0')}`;
    
    weeks.push({
      id: weekId,
      label: `${startDate.getDate()}/${startDate.getMonth() + 1} - ${endDate.getDate()}/${endDate.getMonth() + 1}/${endDate.getFullYear()}`,
      startDate: new Date(startDate),
      endDate: new Date(endDate),
      isCurrent: i === 0
    });
  }
  
  return weeks;
};

const AVAILABLE_WEEKS = generateWeeks();

// H√†m t·∫°o DAYS cho tu·∫ßn ƒë∆∞·ª£c ch·ªçn
const generateDaysForWeek = (weekData) => {
  const days = [];
  const dayNames = ["Ch·ªß nh·∫≠t", "Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7"];
  
  for (let i = 0; i < 7; i++) {
    const date = new Date(weekData.startDate);
    date.setDate(weekData.startDate.getDate() + i);
    
    let dayName = dayNames[date.getDay()];
    if (date.getDay() === 0) { // Ch·ªß nh·∫≠t
      dayName = "Ch·ªß nh·∫≠t";
    }
    
    days.push({
      name: dayName,
      date: `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}`
    });
  }
  
  return days;
};

const SHIFTS = [
  { name: "Ca 1", time: "08:00 - 13:00" },
  { name: "Ca 2", time: "12:00 - 18:00" },
  { name: "Ca 3", time: "17:00 - 22:00" }
];

function App() {
  const [employees, setEmployees] = useState([]);
  const [selectedName, setSelectedName] = useState(() => {
    // Kh√¥i ph·ª•c nh√¢n vi√™n ƒë√£ ch·ªçn t·ª´ localStorage
    return localStorage.getItem("selectedEmployee") || "";
  });
  const [shifts, setShifts] = useState({});
  
  // Week selection states
  const [selectedWeek, setSelectedWeek] = useState(() => {
    // M·∫∑c ƒë·ªãnh l√† tu·∫ßn hi·ªán t·∫°i, s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ Firebase
    return AVAILABLE_WEEKS.find(week => week.isCurrent);
  });
  
  // Dynamic DAYS based on selected week
  const DAYS = generateDaysForWeek(selectedWeek);
  
  // Authentication states
  const [isSystemOpen, setIsSystemOpen] = useState(false); // S·∫Ω ƒë∆∞·ª£c sync t·ª´ Firebase
  const [isLoading, setIsLoading] = useState(true); // Loading state cho Firebase
  const [password, setPassword] = useState("");
  const [showPasswordInput, setShowPasswordInput] = useState(false);
  const [passwordMode, setPasswordMode] = useState(""); // "open", "close", "reset"
  const [showRestoreMessage, _setShowRestoreMessage] = useState(false);

  // Kh·ªüi t·∫°o d·ªØ li·ªáu shifts cho t·∫•t c·∫£ ng√†y v√† ca
  useEffect(() => {
    // L·∫Øng nghe d·ªØ li·ªáu employees
    onValue(ref(db, "employees"), (snapshot) => {
      const data = snapshot.val() || [];
      setEmployees(data);
    });

    // L·∫Øng nghe tr·∫°ng th√°i h·ªá th·ªëng t·ª´ Firebase
    onValue(ref(db, "systemStatus/isOpen"), (snapshot) => {
      const isOpen = snapshot.val() || false;
      setIsSystemOpen(isOpen);
      setTimeout(() => {
        setIsLoading(false); // ƒê√£ load xong d·ªØ li·ªáu t·ª´ Firebase
      }, 1000);
    });

    // L·∫Øng nghe tu·∫ßn ƒë∆∞·ª£c ch·ªçn t·ª´ Firebase
    onValue(ref(db, "systemStatus/selectedWeek"), (snapshot) => {
      const weekId = snapshot.val();
      if (weekId) {
        const week = AVAILABLE_WEEKS.find(w => w.id === weekId);
        if (week) {
          setSelectedWeek(week);
        }
      }
    });
  }, []);

  // useEffect ri√™ng cho shifts ƒë·ªÉ tr√°nh dependency loop
  useEffect(() => {
    // L·∫Øng nghe d·ªØ li·ªáu shifts cho tu·∫ßn ƒë√£ ch·ªçn
    const unsubscribe = onValue(ref(db, `shifts/${selectedWeek.id}`), (snapshot) => {
      const data = snapshot.val() || {};
      // Kh·ªüi t·∫°o c·∫•u tr√∫c m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
      const defaultShifts = {};
      DAYS.forEach((day, dayIndex) => {
        SHIFTS.forEach((shift, shiftIndex) => {
          const key = `day${dayIndex}-shift${shiftIndex}`;
          defaultShifts[key] = [];
        });
      });
      setShifts({ ...defaultShifts, ...data });
    });

    return () => unsubscribe();
  }, [selectedWeek.id, DAYS]);

  // L∆∞u selectedName v√†o localStorage khi thay ƒë·ªïi
  useEffect(() => {
    if (selectedName) {
      localStorage.setItem("selectedEmployee", selectedName);
    } else {
      localStorage.removeItem("selectedEmployee");
    }
  }, [selectedName]);

  // Notification function - ch·ªâ hi·ªÉn th·ªã l·ªói v√† c·∫£nh b√°o
  const showNotification = (message, type = 'info') => {
    // Skip success notifications
    if (type === 'success') {
      return;
    }
    
    switch(type) {
      case 'error':
        toast.error(message);
        break;
      case 'warning':
        toast(message, {
          icon: '‚ö†Ô∏è',
          style: {
            borderLeft: '4px solid #f59e0b',
          },
        });
        break;
      case 'info':
      default:
        toast(message, {
          icon: '‚ÑπÔ∏è',
          style: {
            borderLeft: '4px solid #3b82f6',
          },
        });
        break;
    }
  };

  const handleRegister = async (dayIndex, shiftIndex) => {
    if (!selectedName) {
      showNotification("H√£y ch·ªçn t√™n tr∆∞·ªõc!", "warning");
      return;
    }
    
    const key = `day${dayIndex}-shift${shiftIndex}`;
    const shiftRef = ref(db, `shifts/${selectedWeek.id}/${key}`);
    
    try {
      await runTransaction(shiftRef, (currentData) => {
        const current = currentData || [];
        
        // Ki·ªÉm tra xem user ƒë√£ ƒëƒÉng k√Ω ch∆∞a
        if (current.includes(selectedName)) {
          // User ƒë√£ ƒëƒÉng k√Ω - kh√¥ng thay ƒë·ªïi g√¨, tr·∫£ v·ªÅ data c≈©
          return current;
        }
        
        // Ki·ªÉm tra xem ca ƒë√£ full ch∆∞a (race condition protection)
        if (current.length >= MAX_PEOPLE) {
          // Ca ƒë√£ ƒë·ªß ng∆∞·ªùi - kh√¥ng thay ƒë·ªïi g√¨, tr·∫£ v·ªÅ data c≈©
          return current;
        }
        
        // Th√™m user v√†o danh s√°ch - transaction ƒë·∫£m b·∫£o atomic
        // Ai click tr∆∞·ªõc th√¨ ƒë∆∞·ª£c v√†o tr∆∞·ªõc (first-come-first-served)
        return [...current, selectedName];
      });
      
      // Transaction th√†nh c√¥ng - UI s·∫Ω t·ª± update t·ª´ Firebase listener
      
    } catch {
      // Transaction failed - c√≥ th·ªÉ do network ho·∫∑c l·ªói kh√°c
      showNotification("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!", "error");
    }
  };

  const handleCancel = async (dayIndex, shiftIndex) => {
    console.log('üö´ Cancel clicked', { dayIndex, shiftIndex, selectedName });
    
    if (!selectedName) {
      showNotification("H√£y ch·ªçn t√™n tr∆∞·ªõc!", "warning");
      return;
    }
    
    const key = `day${dayIndex}-shift${shiftIndex}`;
    const shiftRef = ref(db, `shifts/${selectedWeek.id}/${key}`);
    
    console.log('üö´ Starting cancel transaction', { key, selectedWeek: selectedWeek.id });
    
    try {
      await runTransaction(shiftRef, (currentData) => {
        const current = currentData || [];
        console.log('üö´ Transaction data:', { current, selectedName, includes: current.includes(selectedName) });
        
        // ƒê∆°n gi·∫£n h√≥a: ch·ªâ filter user ra kh·ªèi list
        // N·∫øu user kh√¥ng c√≥ trong list th√¨ filter v·∫´n tr·∫£ v·ªÅ list c≈© (kh√¥ng thay ƒë·ªïi g√¨)
        const newList = current.filter(name => name !== selectedName);
        
        console.log('üö´ Filtered list:', { original: current, filtered: newList });
        
        // Lu√¥n return newList, Firebase s·∫Ω t·ª± ƒë·ªông so s√°nh v√† ch·ªâ update n·∫øu c√≥ thay ƒë·ªïi
        return newList;
      });
      
      console.log('üö´ Cancel transaction completed');
      
    } catch (error) {
      console.log('üö´ Cancel transaction failed:', error);
      // Ch·ªâ hi·ªÉn th·ªã l·ªói khi c√≥ network issues ho·∫∑c l·ªói th·∫≠t s·ª±
      showNotification("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!", "error");
    }
  };

  const handleEmployeeChange = (e) => {
    setSelectedName(e.target.value);
  };

  const handleClearSelection = () => {
    setSelectedName("");
    localStorage.removeItem("selectedEmployee");
  };

  const handleWeekChange = (e) => {
    const weekId = e.target.value;
    const week = AVAILABLE_WEEKS.find(w => w.id === weekId);
    setSelectedWeek(week);
  };

  const getShiftData = (dayIndex, shiftIndex) => {
    const key = `day${dayIndex}-shift${shiftIndex}`;
    const data = shifts[key] || [];
    return data;
  };

  const isShiftFull = (dayIndex, shiftIndex) => {
    return getShiftData(dayIndex, shiftIndex).length >= MAX_PEOPLE;
  };

  const isUserRegistered = (dayIndex, shiftIndex) => {
    const shiftData = getShiftData(dayIndex, shiftIndex);
    const isRegistered = selectedName && shiftData.includes(selectedName);
    return isRegistered;
  };

  // Authentication handlers
  const handleOpenSystem = () => {
    setShowPasswordInput(true);
    setPasswordMode("open");
  };

  const handleCloseSystem = () => {
    setShowPasswordInput(true);
    setPasswordMode("close");
  };

  const handleResetSchedule = () => {
    setShowPasswordInput(true);
    setPasswordMode("reset");
  };

  const handlePasswordSubmit = () => {
    if (password === "start") {
      if (passwordMode === "open") {
        // M·ªü h·ªá th·ªëng v√† l∆∞u tu·∫ßn ƒë∆∞·ª£c ch·ªçn
        set(ref(db, "systemStatus/isOpen"), true);
        set(ref(db, "systemStatus/selectedWeek"), selectedWeek.id);
      } else if (passwordMode === "close") {
        // ƒê√≥ng h·ªá th·ªëng
        set(ref(db, "systemStatus/isOpen"), false);
      } else if (passwordMode === "reset") {
        // Reset l·ªãch l√†m vi·ªác - x√≥a to√†n b·ªô shifts cho tu·∫ßn hi·ªán t·∫°i
        const resetShifts = {};
        DAYS.forEach((day, dayIndex) => {
          SHIFTS.forEach((shift, shiftIndex) => {
            const key = `day${dayIndex}-shift${shiftIndex}`;
            resetShifts[key] = [];
          });
        });
        set(ref(db, `shifts/${selectedWeek.id}`), resetShifts);
        // Kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng cho reset
      }
      setShowPasswordInput(false);
      setPassword("");
      setPasswordMode("");
    } else {
      showNotification("M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!", "error");
      setPassword("");
    }
  };

  const handleCancelPassword = () => {
    setShowPasswordInput(false);
    setPassword("");
    setPasswordMode("");
  };

  // Render loading screen khi ƒëang load d·ªØ li·ªáu t·ª´ Firebase
  if (isLoading) {
    return (
      <div className="auth-container">
        <div className="auth-card loading-card">
          <h1>üîÑ ƒêang T·∫£i...</h1>
          <p>ƒêang k·∫øt n·ªëi v·ªõi h·ªá th·ªëng</p>
          
          <div className="loading-animation">
            <div className="spinner"></div>
          </div>
        </div>
      </div>
    );
  }

  // Render password input screen
  if (showPasswordInput) {
    return (
      <div className="auth-container">
        <div className="auth-card">
          <h1>üîê X√°c Th·ª±c</h1>
          <p>
            {passwordMode === "open" 
              ? "Ch·ªçn tu·∫ßn v√† nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ m·ªü h·ªá th·ªëng" 
              : passwordMode === "close"
              ? "Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ ƒë√≥ng h·ªá th·ªëng"
              : "Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ reset to√†n b·ªô l·ªãch l√†m vi·ªác"
            }
          </p>
          
          {passwordMode === "open" && (
            <div className="week-selector-auth">
              <label>üìÖ Ch·ªçn tu·∫ßn ƒë·ªÉ m·ªü:</label>
              <select 
                value={selectedWeek.id} 
                onChange={handleWeekChange}
              >
                {AVAILABLE_WEEKS.map((week) => (
                  <option key={week.id} value={week.id}>
                    {week.label} {week.isCurrent ? '(Tu·∫ßn hi·ªán t·∫°i)' : ''}
                  </option>
                ))}
              </select>
            </div>
          )}
          
          <div className="password-input">
            <input
              type="password"
              placeholder="Nh·∫≠p m·∫≠t kh·∫©u..."
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              onKeyPress={(e) => e.key === "Enter" && handlePasswordSubmit()}
            />
            <button onClick={handlePasswordSubmit}>X√°c nh·∫≠n</button>
          </div>
          
          <button className="back-btn" onClick={handleCancelPassword}>
            ‚Üê Quay l·∫°i
          </button>
        </div>
      </div>
    );
  }

  // N·∫øu h·ªá th·ªëng ƒëang ƒë√≥ng, hi·ªÉn th·ªã n√∫t m·ªü h·ªá th·ªëng
  if (!isSystemOpen) {
    return (
      <div className="auth-container">
        <div className="auth-card">
          <h1>ƒêƒÉng K√Ω L·ªãch L√†m Vi·ªác</h1>
          <p>H·ªá th·ªëng hi·ªán ƒëang ƒë√≥ng</p>
          
          {/* Hi·ªÉn th·ªã tr·∫°ng th√°i h·ªá th·ªëng */}
          <div className="system-status closed">
            üî¥ H·ªá th·ªëng ƒëang ƒë√≥ng
          </div>
          
          <div className="auth-buttons">
            <button 
              className="auth-btn manager-btn"
              onClick={handleOpenSystem}
            >
              üîì M·ªü H·ªá Th·ªëng
            </button>
          </div>
        </div>
      </div>
    );
  }

  // N·∫øu h·ªá th·ªëng ƒë√£ m·ªü, hi·ªÉn th·ªã giao di·ªán ch√≠nh
  if (isSystemOpen) {
    return (
      <div className="container">
        {/* Header v·ªõi system controls */}
        <div className="app-header">
          <div className="header-left">
            <h1>üìÖ ƒêƒÉng K√Ω L·ªãch L√†m Vi·ªác</h1>
            <p>{selectedWeek.label}</p>
            <span className="role-badge">
              üü¢ H·ªá Th·ªëng ƒêang Ho·∫°t ƒê·ªông
            </span>
          </div>
          
          <div className="header-right">
            <button 
              className="reset-btn"
              onClick={handleResetSchedule}
              title="Reset to√†n b·ªô l·ªãch l√†m vi·ªác"
            >
              üîÑ Reset L·ªãch
            </button>
            <button 
              className="system-control-btn"
              onClick={handleCloseSystem}
              title="ƒê√≥ng h·ªá th·ªëng"
            >
              üîí ƒê√≥ng H·ªá Th·ªëng
            </button>
          </div>
        </div>

        {showRestoreMessage && (
          <div className="restore-message">
            ‚úÖ ƒê√£ kh√¥i ph·ª•c l·ª±a ch·ªçn nh√¢n vi√™n: {selectedName}
          </div>
        )}

        <div className="content">
          <div className="employee-selector">
            <label>üë§ Ch·ªçn nh√¢n vi√™n:</label>
            <div className="employee-controls">
              <select 
                value={selectedName} 
                onChange={handleEmployeeChange}
              >
                <option value="">-- Ch·ªçn nh√¢n vi√™n --</option>
                {employees.map((emp, index) => (
                  <option key={index} value={emp}>{emp}</option>
                ))}
              </select>
              {selectedName && (
                <button 
                  className="clear-btn"
                  onClick={handleClearSelection}
                  title="X√≥a l·ª±a ch·ªçn"
                >
                  ‚úï
                </button>
              )}
            </div>
          </div>

          <div className="desktop-table">
            <div className="table-wrapper">
              <table className="schedule-table">
                <thead>
                  <tr>
                    <th></th>
                    {DAYS.map((day, index) => (
                      <th key={index} className="day-header">
                        {day.name}
                        <br />
                        <small>{day.date}</small>
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {SHIFTS.map((shift, shiftIndex) => (
                    <tr key={shiftIndex}>
                      <td>
                        <div>{shift.name}</div>
                        <small style={{opacity: 0.7, fontSize: '0.8rem'}}>{shift.time}</small>
                      </td>
                      {DAYS.map((day, dayIndex) => {
                        const shiftData = getShiftData(dayIndex, shiftIndex);
                        const isFull = isShiftFull(dayIndex, shiftIndex);
                        const isRegistered = isUserRegistered(dayIndex, shiftIndex);
                        
                        return (
                          <td 
                            key={dayIndex} 
                            className={`shift-cell ${shiftData.length > 0 ? 'has-employees' : ''} ${isFull ? 'full' : ''} ${isRegistered ? 'registered' : ''}`}
                          >
                            <div className="container-fluid">
                              <div className="employee-list">
                                {shiftData.map((employee, empIndex) => (
                                  <span key={empIndex} className={`employee-tag ${employee === selectedName ? 'current-user' : ''}`}>
                                    {employee}
                                  </span>
                                ))}
                              </div>
                              {(!isFull || isRegistered) && (
                                <div className="box-btn">
                                  {isRegistered ? (
                                    <button
                                      className="cancel-btn"
                                      onClick={() => handleCancel(dayIndex, shiftIndex)}
                                      disabled={!selectedName}
                                    >
                                      H·ªßy
                                    </button>
                                  ) : (
                                    <button
                                      className="register-btn"
                                      onClick={() => handleRegister(dayIndex, shiftIndex)}
                                      disabled={!selectedName || isFull}
                                    >
                                      ƒêƒÉng k√Ω
                                    </button>
                                  )}
                                </div>
                              )}
                            </div>
                            <div className={`shift-status ${isFull ? 'status-full' : 'status-available'}`}>
                              {shiftData.length}/{MAX_PEOPLE}
                            </div>
                          </td>
                        );
                      })}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Mobile Table Layout */}
          <div className="mobile-table">
            <div className="table-wrapper">
              <table className="mobile-schedule-table">
                <thead>
                  <tr>
                    <th></th>
                    {SHIFTS.map((shift, index) => (
                      <th key={index} className="shift-header-mobile">
                        {shift.name}
                        <br />
                        <small>{shift.time}</small>
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  {DAYS.map((day, dayIndex) => (
                    <tr key={dayIndex}>
                      <td className="day-cell-mobile">
                        <div>{day.name}</div>
                        <small>{day.date}</small>
                      </td>
                      {SHIFTS.map((shift, shiftIndex) => {
                        const shiftData = getShiftData(dayIndex, shiftIndex);
                        const isFull = isShiftFull(dayIndex, shiftIndex);
                        const isRegistered = isUserRegistered(dayIndex, shiftIndex);
                        
                        return (
                          <td 
                            key={shiftIndex} 
                            className={`shift-cell-mobile ${shiftData.length > 0 ? 'has-employees' : ''} ${isFull ? 'full' : ''} ${isRegistered ? 'registered' : ''}`}
                          >
                            <div className="container-fluid">
                            <div className="employee-list-mobile">
                              {shiftData.map((employee, empIndex) => (
                                <span key={empIndex} className={`employee-tag-mobile ${employee === selectedName ? 'current-user' : ''}`}>
                                  {employee}
                                </span> 
                              ))}
                            </div>
                            {(!isFull || isRegistered) && (
                              isRegistered ? (
                                <div className="box-btn-mobile">
                                  <button
                                    className="cancel-btn-mobile"
                                    onClick={() => handleCancel(dayIndex, shiftIndex)}
                                    disabled={!selectedName}
                                  >
                                    x
                                  </button>
                                </div>
                              ) : (
                                <div className="box-btn-mobile">
                                  <button
                                    className="register-btn-mobile"
                                    onClick={() => handleRegister(dayIndex, shiftIndex)}
                                    disabled={!selectedName || isFull}
                                  >
                                    +
                                  </button>
                                </div>
                              )
                            )}
                            </div>
                            <div className={`shift-status-mobile ${isFull ? 'status-full' : 'status-available'}`}>
                              {shiftData.length}/{MAX_PEOPLE}
                            </div>
                          </td>
                        );
                      })}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Fallback return (shouldn't reach here)
  return null;
}

export default App;
